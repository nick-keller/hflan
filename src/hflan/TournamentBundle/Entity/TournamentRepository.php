<?php

namespace hflan\TournamentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\AbstractQuery;

/**
 * tournamentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TournamentRepository extends EntityRepository
{
    public function getTournaments(Event $event)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->select('a')
            ->join('a.event', 'e')
            ->where('e = :event')
                ->setParameter('event', $event);

        return $queryBuilder;
    }

    public function findByEvent(Event $event)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->select('a.id, a.name, a.game, a.price, a.nbrTeams, a.price*a.playersPerTeam*a.nbrTeams AS prizePool, COUNT(DISTINCT tc.id) AS confirmedTeams, COUNT(DISTINCT tp.id) AS pendingTeams')
            ->leftJoin('a.teams', 'tc', 'WITH', 'tc.confirmed = true')
            ->leftJoin('a.teams', 'tp', 'WITH', 'tp.confirmed = false')
            ->where('a.event = :event')
                ->setParameter('event', $event)
            ->addGroupBy('a.id');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getTournamentWithEmbeddedPlayer(Event $event = null)
    {
        $queryBuilder = $this->createQueryBuilder('a')
            ->select('a')
            ->where('a.event = :event')
                ->setParameter('event', $event)
            ->andWhere('LENGTH(a.embeddedPlayer) != 0');

        return $queryBuilder->getQuery()->getResult(AbstractQuery::HYDRATE_OBJECT);
    }
}
